#Линейный поиск. Находим наименьший i-й элемент в неотсортированном массиве с неповторяющимися числами (можно находить мин макс медиану и т.д.) Среднее время работы O(n)
from random import randint
A = []
with open('input.txt', 'r') as f:
    for line in f:
        k = line.split('\n')
        A.append(int(k[0]))

def Partition(A):
    # print('массив А перед перестановкой - ', A)
    p = A[0]
    i = 1
    for j in range( 1, len(A)):
        if A[j] < p:
            #print('i= ', i, ' j= ', j)
            #print('меняем местами ', A[j], ' и ', A[i])
            A[j], A[i] = A[i], A[j]
            i += 1
            #print('i= ', i, ' j= ', j)

    A[0], A[i-1] = A[i-1], A[0]
    # print('массив А после перестановки - ', A)
    return i-1

#выбирает опорный элемент
def ChoosePivot(A):
    return randint(0, len(A) - 1)
    #return randint(l, r) #рандомные числа от l о r включительно. получилось 168946 > 162085 для алг выбора первого элемента

#i - номер элемента в отсортированном массиве, который нужно вывести
def RSelect(A, i) -> int:
    #print('Сортировка l=', l, ' r=', r)
    # print('массив А сейчас такой - ', A)
    # print('!!!Ищем элемент под номером i в этом текущем массиве ', i)
    n = len(A)
    if n == 1:
        return A[0]

    p = ChoosePivot(A) #выбираем значение опорного элемента в новом массиве
    # print('выбрали опорный элемент ', p)
    # print('значение опорного элемента', A[p])
    A[p], A[0] = A[0], A[p]
    j = Partition(A) #разделяет и выдает индекс опорного элемента

    # print('индекс опорного элемента окончательный враиант ', j)
    if n >= 1:
        if i == j:
            # print('i = j: ', i, j)
            return A[j]
        elif i < j:
            # print('i < j: ', i, j)
            A1 = A[:j] #копирует не включая A[j]
            # print('A1=', A1)
            x = RSelect(A1, i)
        else:
            #print('i > j: ', i, j)
            A2 = A[j+1:]
            x = RSelect(A2, i - j - 1)
        return x


# print(A)
# print(len(A))
i = 50
count = RSelect(A, i-1)
print(count)


