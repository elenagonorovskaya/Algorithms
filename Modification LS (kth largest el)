#С помощью модифицированного линейного поиска (с повторяющимися элементами) находим k-ый наибольший элемент. Время работы O(n)
from random import randint
A = list(map(int, input().split()))
n = len(A)

def Partition(A):
    # print('массив А перед перестановкой - ', A)
    p = A[0]
    i = 1
    k = 1
    for j in range(1, len(A)):
        if A[j] < p:
            if k != i:
                A[j], A[k], A[i] = A[i], A[j], A[k]
                k += 1
                i += 1
            else:
                A[j], A[i] = A[i], A[j]
                k += 1
                i += 1
        elif A[j] == p:
            A[j], A[i] = A[i], A[j]
            i += 1

    A[0], A[i-1] = A[i-1], A[0]
    # print('массив А после перестановки - ', A)
    return k,i-1

#выбирает опорный элемент
def ChoosePivot(A):
    print(A, len(A))
    return randint(0, len(A) - 1)
    #return randint(l, r) #рандомные числа от l о r включительно. получилось 168946 > 162085 для алг выбора первого элемента

#i - номер элемента в отсортированном массиве, который нужно вывести
def RSelect(A, i) -> int:
    #print('Сортировка l=', l, ' r=', r)
    # print('массив А сейчас такой - ', A)
    # print('!!!Ищем элемент под номером i в этом текущем массиве ', i)
    n = len(A)
    if n == 1:
        return A[0]
    elif n >= 1:
        p = ChoosePivot(A) #выбираем значение опорного элемента в новом массиве
        # print('выбрали опорный элемент ', p)
        # print('значение опорного элемента', A[p])
        A[p], A[0] = A[0], A[p]
        k, j = Partition(A) #разделяет и выдает индекс опорного элемента

        # print('индекс опорного элемента окончательный враиант ', j)

        if i >= k and i <= j:
            # print('i = j: ', i, j)
            return A[j]
        elif i < k:
            # print('i < j: ', i, j)
            A1 = A[:k]  # копирует не включая A[j]
            # print('A1=', A1)
            x = RSelect(A1, i)
        else:
            # print('i > j: ', i, j)
            A2 = A[j + 1:]
            x = RSelect(A2, i - j - 1)
        return x
    return 0


k = 4 #наибольший
i = n - k
count = RSelect(A, i)
print(A)
print('Answer', count)
