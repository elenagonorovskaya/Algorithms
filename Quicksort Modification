#Модификация быстрой сортировки. Теперь при огромном количестве повторяющихся элементов входного массива - алгоритм будет работать за время O(n log n), а не O(n^2) при таких данных. Здесь идет разделение на 3 части вокруг опорного элемента - делала сама, проверяла в Яндекс.Алгоритмах. вроде все норм
from random import randint
n = input()
A = list(map(int, input().split()))


def Partition(A, l, r):
    k = l + 1 
    p = A[l]
    i = l + 1 
    for j in range(l + 1, r + 1):
        if A[j] < p:
            if k != i:
                A[j], A[k], A[i] = A[i], A[j], A[k]
                k += 1
                i += 1
            else:
                A[j], A[i] = A[i], A[j]
                k += 1
                i += 1
        elif A[j] == p:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[l], A[i-1] = A[i-1], A[l]
    return k, i-1


def ChoosePivot(A, l, r):
    return randint(l, r) 


def QuickSort(A, l, r) -> int:
    if l >= r:
        return 0
    c = r - l
    i = ChoosePivot(A, l, r) #выбираем опорный элемент
    A[i], A[l] = A[l], A[i] #делаем опорный элемент первым
    k, j = Partition(A, l, r) #разделяет и выдает индексы опорного элемента
    c1 = QuickSort(A, l, k-1)
    c2 = QuickSort(A, j+1, r)

    return c + c1 + c2


c = QuickSort(A, 0, len(A)-1)

print(' '.join(map(str, A)))
